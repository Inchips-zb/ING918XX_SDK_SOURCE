ING_SRC_INC=-I $(ING_REL)/src/BSP -I $(ING_REL)/src/FWlib -I $(ING_REL)/src/StartUP/ing918 -I $(ING_REL)/src/Tools -I $(ING_REL)/src
ING_BUNDLE_INC=-I $(ING_BUNDLE) -I $(ING_BUNDLE)/os -I $(CMSIS_INC)

OBJ_PATH=obj

TEMP1 = $(PROJECT_FILES:.c=.o)
TEMP2 = $(TEMP1:.cpp=.o)

APP_O_FILES = $(addprefix $(OBJ_PATH)/,$(notdir $(TEMP2) $(STARTUP:.s=.o)))

MAP_FILE=$(OBJ_PATH)/$(APPNAME).map

STARTUP_DEFS=-D__STARTUP_CLEAR_BSS

# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO=--specs=nano.specs
#--specs=nano.specs

# Use seimhosting or not
USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST=--specs=nosys.specs

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m3

PREFIX	 = @arm-none-eabi-
CC      := $(PREFIX)gcc
AS      := $(PREFIX)as
AR      := $(PREFIX)ar
CXX     := $(PREFIX)g++
AR      := $(PREFIX)gcc-ar
NM      := $(PREFIX)gcc-nm
OBJCOPY := $(PREFIX)objcopy
OBJDUMP := $(PREFIX)objdump
SIZE    := $(PREFIX)size
STRIP   := $(PREFIX)strip
RANLIB  := $(PREFIX)gcc-ranlib

CFLAGS=$(ARCH_FLAGS) $(STARTUP_DEFS) $(ING_SRC_INC) $(ING_BUNDLE_INC) $(APPDEFS) -O0 -ffunction-sections -fdata-sections -Wno-deprecated

# Need following option for LTO as LTO will treat retarget functions as
# unused without following option
CFLAGS+=-fno-builtin

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(MAP_FILE)

LDSCRIPTS=-L. -T $(APPNAME).ld
LFLAGS=$(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(SYMDEFS) $(GC) -lstdc++ $(MAP)

# to enable float point value printf
LFLAGS+=-u _printf_float

release: $(APPNAME).bin

debug: CFLAGS += -DDEBUG -g
debug: $(APPNAME).bin

lib: $(APPNAME).a

$(APPNAME).bin:$(APPNAME).axf
	$(OBJCOPY) -v -O binary $< $@

$(APPNAME).a: $(APP_O_FILES)
	$(info AR)
	$(AR) rcs $@ $(APP_O_FILES)
	$(AR) d $@ container.o

$(APPNAME).axf: $(OBJ_PATH) $(APP_O_FILES)
	$(info LINK)
	$(CC) -o $@ $(APP_O_FILES) $(LFLAGS) $(CFLAGS)
	$(SIZE) $@

$(OBJ_PATH)/%.o: src/%.s
	$(info ASM $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: src/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: ../../examples/get_started/src/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: ../../examples/get_started/src/%.cpp ../../examples/get_started/playground/playground.cpp
	$(info CXX $<)
	$(CXX) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: ../../examples/peripheral_pedometer/src/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/BSP/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/FWlib/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/StartUp/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/Tools/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

ifeq ($(OS),Windows_NT)
$(OBJ_PATH):
	cmd /C mkdir $(OBJ_PATH)

clean:
	rm -f $(APPNAME).axf $(APPNAME).bin $(APP_O_FILES) $(MAP_FILE) $(OBJ_PATH)/*.o
else
$(OBJ_PATH):
	mkdir $(OBJ_PATH)

clean:
	rm -f $(APPNAME).axf $(APPNAME).bin $(APP_O_FILES) $(MAP_FILE)
endif

rebuild: clean release

